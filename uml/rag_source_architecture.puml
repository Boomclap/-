@startuml RAG-Enhanced Source Architecture

!define RECTANGLE class

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkGray
}

package "信源知识库管理" {
    class "向量数据库" as VectorDB {
        + 文本嵌入
        + 向量索引
        + 相似度计算
    }

    class "知识图谱" as KnowledgeGraph {
        + 实体关系
        + 属性映射
        + 推理规则
    }

    class "信源数据处理" as SourceProcessor {
        + 文本分块
        + 嵌入生成
        + 元数据提取
    }
}

package "RAG增强查询引擎" {
    class "检索增强器" as Retriever {
        + 语义检索
        + 相关性排序
        + 上下文组装
    }

    class "生成增强器" as Generator {
        + 提示词模板
        + 结果生成
        + 答案验证
    }

    class "查询路由器" as QueryRouter {
        + 查询分类
        + 策略选择
        + 结果合并
    }
}

package "信源适配层" {
    class "传统信源适配器" as TraditionalAdapter {
        + API调用
        + 数据库查询
        + 网页爬取
    }

    class "RAG信源适配器" as RAGAdapter {
        + 语义检索
        + 知识推理
        + 结果生成
    }

    class "混合查询执行器" as HybridExecutor {
        + 查询优化
        + 并行执行
        + 结果融合
    }
}

package "质量控制" {
    class "结果验证器" as Validator {
        + 一致性检查
        + 可信度评估
        + 冲突解决
    }

    class "反馈优化器" as Optimizer {
        + 性能监控
        + 策略调整
        + 知识更新
    }
}

' 关系定义
SourceProcessor --> VectorDB : 构建索引
SourceProcessor --> KnowledgeGraph : 构建图谱

Retriever --> VectorDB : 检索
Retriever --> KnowledgeGraph : 查询
Generator --> Retriever : 使用上下文

QueryRouter --> TraditionalAdapter : 路由
QueryRouter --> RAGAdapter : 路由
HybridExecutor --> Validator : 验证结果

Validator --> Optimizer : 提供反馈
Optimizer --> QueryRouter : 优化策略
Optimizer --> VectorDB : 更新知识

note right of RAGAdapter
  RAG应用场景：
  1. 非结构化文本匹配
  2. 模糊查询补全
  3. 跨信源知识推理
end note

note right of HybridExecutor
  混合查询策略：
  1. 精确匹配优先
  2. 语义检索补充
  3. 知识推理验证
end note

@enduml